// SkillForge Database Schema
// AI-powered personal growth tracking system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== User & Authentication ====================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Gamification stats
  totalXP       Int      @default(0)
  level         Int      @default(1)
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastActiveAt  DateTime?

  // Privacy settings
  privacySettings Json @default("{\"aiAnalysis\":true,\"shareLevel\":\"private\"}")

  // Relations
  accounts      Account[]
  sessions      Session[]
  skillTrees    SkillTree[]
  activities    Activity[]
  achievements  UserAchievement[]

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==================== Skill Tree System ====================

model SkillTree {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String   // "Full-Stack Engineer Path"
  description String?  @db.Text
  domain      String   // "software_engineering", "fitness", etc.

  isTemplate  Boolean  @default(false)
  isPublic    Boolean  @default(false)
  aiGenerated Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  skills      Skill[]

  @@index([userId])
  @@index([domain])
  @@index([isTemplate])
}

model Skill {
  id            String     @id @default(cuid())
  treeId        String
  tree          SkillTree  @relation(fields: [treeId], references: [id], onDelete: Cascade)

  name          String     // "React Hooks"
  description   String?    @db.Text
  category      String?    // AI auto-categorized

  // Leveling system
  currentLevel  Int        @default(1)
  maxLevel      Int        @default(10)
  currentXP     Int        @default(0)
  xpToNextLevel Int        @default(100)

  // Status tracking
  status        SkillStatus @default(LOCKED)
  unlockedAt    DateTime?
  completedAt   DateTime?
  masteredAt    DateTime?

  // Visual positioning (for React Flow)
  positionX     Float?
  positionY     Float?

  // AI metadata (difficulty, resources, etc.)
  aiMetadata    Json?

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  tasks         Task[]
  activities    Activity[]

  // Skill dependencies (self-relation)
  prerequisites Skill[]    @relation("SkillDependencies")
  dependents    Skill[]    @relation("SkillDependencies")

  @@index([treeId])
  @@index([status])
}

enum SkillStatus {
  LOCKED       // Cannot start yet
  AVAILABLE    // Can start learning
  IN_PROGRESS  // Currently learning
  COMPLETED    // Finished all tasks
  MASTERED     // Reached max level
}

// ==================== Task System ====================

model Task {
  id              String   @id @default(cuid())
  skillId         String
  skill           Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)

  title           String
  description     String?  @db.Text
  type            TaskType
  order           Int      @default(0) // For task ordering within a skill

  xpReward        Int
  estimatedHours  Float?

  completed       Boolean  @default(false)
  completedAt     DateTime?
  submission      String?  @db.Text // User's work submission
  notes           String?  @db.Text // User's notes

  // AI evaluation results
  qualityScore    Float?   // 1-10
  aiFeedback      String?  @db.Text

  // AI-generated checklist options for task completion
  checklistOptions Json?   // ["完成文案改写", "标题吸引力测试", ...]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  activities      Activity[]

  @@index([skillId])
  @@index([completed])
  @@index([skillId, order]) // Composite index for efficient ordering queries
}

enum TaskType {
  PRACTICE   // Hands-on practice
  PROJECT    // Build something
  STUDY      // Read/watch content
  CHALLENGE  // Test knowledge
  MILESTONE  // Major checkpoint
}

// ==================== Activity Log ====================

model Activity {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  skillId     String?
  skill       Skill?       @relation(fields: [skillId], references: [id], onDelete: SetNull)

  taskId      String?
  task        Task?        @relation(fields: [taskId], references: [id], onDelete: SetNull)

  type        ActivityType
  description String?      @db.Text
  xpGained    Int          @default(0)
  duration    Int?         // Minutes spent
  metadata    Json?        // Additional data

  createdAt   DateTime     @default(now())

  @@index([userId, createdAt])
  @@index([skillId])
}

enum ActivityType {
  TASK_COMPLETE
  STUDY_SESSION
  MANUAL_LOG
  MILESTONE_REACHED
  LEVEL_UP
  SKILL_UNLOCKED
  SKILL_MASTERED
}

// ==================== Achievement System ====================

model Achievement {
  id          String   @id // "first-skill", "streak-7", "level-10"

  name        String
  description String
  iconName    String   // Emoji or icon name
  rarity      Rarity

  createdAt   DateTime @default(now())

  users       UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  unlockedAt    DateTime    @default(now())

  @@unique([userId, achievementId])
  @@index([userId])
}

enum Rarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}
